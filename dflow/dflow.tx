/*
 *            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
 *                    Version 2, December 2004
 *
 * Copyright (C) 2022 Panayiotou, Konstantinos <klpanagi@gmail.com>
 * Author: Panayiotou, Konstantinos <klpanagi@gmail.com>
 *
 * Everyone is permitted to copy and distribute verbatim or modified
 * copies of this license document, and changing it is allowed as long
 * as the name is changed.
 *
 *            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
 *   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
 *
 *  0. You just DO WHAT THE FUCK YOU WANT TO.
 */

/*
    dFlow Language
*/

dFlow:
    (
    ('entities'
        entities*=TrainableEntity
    'end')?

    ('synonyms'
        synonyms*=Synonym
    'end')?

    ('triggers'
        triggers+=Trigger
    'end')?

    ('dialogues'
        dialogues+=Dialogue
    'end')?

    ('eservices'
        eservices*=EServiceDef
    'end')?
    )#
;

EServiceDef: EServiceDefHTTP;

EServiceDefHTTP:
    'EServiceHTTP' name=ID
        (  'verb:' verb=HTTPVerb
          'host:' host=STRING
          ('port:' port=INT)?
          ('path:' path=STRING)?
        )#
    'end'
;

// ENTITIY --------------------------------------------------------------
// ----------------------------------------------------------------------
Entity: TrainableEntity | PretrainedEntity;

TrainableEntity:
    'Entity' name=ID
        words+=Words[',']
    'end'
;

PretrainedEntity:
    'PERSON'        |
    'NORP'          |
    'FAC'           |
    'ORG'           |
    'GPE'           |
    'LOC'           |
    'PRODUCT'       |
    'EVENT'         |
    'WORK_OF_ART'   |
    'LAW'           |
    'LANGUAGE'      |
    'DATE'          |
    'TIME'          |
    'PERCENT'       |
    'MONEY'         |
    'QUANTITY'      |
    'ORDINAL'       |
    'CARDINAL'
;
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------

Synonym:
    'Synonym' name=ID
        words+=Words[',']
    'end'
;

// TRIGGER --------------------------------------------------------------
// ----------------------------------------------------------------------
Trigger: Intent | Event;

Intent:
    'Intent' name=ID
        phrases+=IntentPhraseComplex[',']
    'end'
;

Event:
    'Event' name=ID
        uri=STRING
    'end'
;

IntentPhraseComplex: phrases+=IntentPhrase;

IntentPhrase: IntentPhraseStr | IntentPhraseTE | IntentPhraseSynonym | IntentPhrasePE;

IntentPhraseStr: STRING;

IntentPhraseTE: 'TE:' trainable=[TrainableEntity|FQN];

IntentPhrasePE: 'PE:' pretrained=[PretrainedEntity|FQN] ('[' refPreValues*=STRING[','] ']')?;

IntentPhraseSynonym: 'S:' synonym=[Synonym|FQN];
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------

// DIALOGUE -------------------------------------------------------------
// ----------------------------------------------------------------------
Dialogue:
    'Dialogue' name=ID
        'on:' onTrigger+=[Trigger|FQN|^triggers][',']
        'responses:' responses+=Response[',']
    'end'
;

Response: ActionGroup | Form;

Form:
    'Form' name=ID
        params+=FormParam
    'end'
;

FormParam:
    name=ID ':' type=ParameterTypeDef '=' source=FormParamSource
;

FormParamRef: param=[FormParam|FQN|^dialogues*.responses.params];

FormParamSource: HRIParamSource | EServiceParamSource;

HRIParamSource:
    'HRI' '(' askSlot=STRING (',' '['extract+=ExtractionSource[','] ']')? ')'
;

EServiceParamSource: EServiceCallHTTP;

EServiceCallHTTP:
    eserviceRef=[EServiceDef|FQN|eservices]'('
        (
        ('query=' '[' query_params*=EServiceParam[','] ']' ',')?
        ('header=' '[' header_params*=EServiceParam[','] ']' ',')?
        ('path=' '[' path_params*=EServiceParam[','] ']' ',')?
        ('body=' '[' body_params*=EServiceParam[','] ']' ',')?
        )#
    ')' ('[' response_filter=EServiceResponseFilter ']')?
;

EServiceParam: name=ID '=' value=ParameterValue;

ParameterValue: INT | FLOAT | STRING | BOOL | List | Dict | FormParamIndex;
ParameterTypeDef: 'int' | 'float' | 'str' | 'bool' | 'list' | 'dict';

ExtractionSource: ExtractFromIntent | ExtractFromEntity;

ExtractFromIntent: intent=[Trigger] ':' value=ParameterValue;
ExtractFromEntity: ExtractFromPretrainedEntity | ExtractFromTrainableEntity;
ExtractFromPretrainedEntity: entity=[PretrainedEntity|FQN|^entities*];
ExtractFromTrainableEntity: entity=[TrainableEntity|FQN|^entities*];

EServiceResponseFilter: ID('.'ID)*;
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------

// ACTIONS --------------------------------------------------------------
// ----------------------------------------------------------------------
ActionGroup:
    'ActionGroup' name=ID
        actions+=Action
    'end'
;

Action: SpeakAction | FireEventAction | RESTCallAction;

SpeakAction:
    'Speak' '(' text+=Text ')'
;

FireEventAction:
    'FireEvent' '(' uri=STRING ',' msg=Text ')'
;

RESTCallAction: EServiceCallHTTP;
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------

// GENERAL --------------------------------------------------------------
// ----------------------------------------------------------------------
HTTPVerb: 'GET'|'POST'|'PUT';

DictItem:
    name=ID ':' value=DictTypes
;

DictTypes:
    NUMBER | STRING | BOOL | Dict | List | FormParamIndex
;

Dict:
    '{' items*=DictItem[','] '}'
;

List:
    '[' items*=ListElements[','] ']'
;

ListElements:
    NUMBER | STRING | BOOL | List | Dict | FormParamIndex
;

Words:
    /[-\w ]*\b/
;

Text: TextStr | FormParamIndex;

TextStr: STRING;

FormParamIndex: FormParamRef('['ID('.'ID)*']')?;
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------

// === Fully Qualified Names Rule ===
FQN: ID('.'ID)*;

// special rule for comments.
Comment:
    /\/\/.*$/
;
// ----------------------------------------------------------------------
