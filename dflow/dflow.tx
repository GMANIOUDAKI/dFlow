/*
 *            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
 *                    Version 2, December 2004
 *
 * Copyright (C) 2022 Panayiotou, Konstantinos <klpanagi@gmail.com>
 * Author: Panayiotou, Konstantinos <klpanagi@gmail.com>
 *
 * Everyone is permitted to copy and distribute verbatim or modified
 * copies of this license document, and changing it is allowed as long
 * as the name is changed.
 *
 *            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
 *   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
 *
 *  0. You just DO WHAT THE FUCK YOU WANT TO.
 */

/*
    dFlow Language
*/

dFlow:
    (
    'entities'
        entities*=TrainableEntity
    'end'
    )?
    (
    'synonyms'
        synonyms*=Synonym
    'end'
    )?
    (
    'triggers'
        triggers+=Trigger
    'end'
    )?
    (
    'dialogues'
        dialogues+=Dialogue
    'end'
    )?
;

// ENTITIY --------------------------------------------------------------
Entity: TrainableEntity | PretrainedEntity;

TrainableEntity:
    'Entity' name=ID
        words+=Words[',']
    'end'
;

PretrainedEntity:
    'PERSON'        |
    'NORP'          |
    'FAC'           |
    'ORG'           |
    'GPE'           |
    'LOC'           |
    'PRODUCT'       |
    'EVENT'         |
    'WORK_OF_ART'   |
    'LAW'           |
    'LANGUAGE'      |
    'DATE'          |
    'TIME'          |
    'PERCENT'       |
    'MONEY'         |
    'QUANTITY'      |
    'ORDINAL'       |
    'CARDINAL'
;

// ----------------------------------------------------------------------

Synonym:
    'Synonym' name=ID
        words+=Words[',']
    'end'
;

Trigger: Intent | Event;

// INTENT
Intent:
    'Intent' name=ID
        phrases+=IntentPhraseComplex[',']
    'end'
;

Event:
    'Event' name=ID
        uri=STRING
    'end'
;

IntentPhraseComplex: phrases+=IntentPhrase;

IntentPhrase: IntentPhraseStr | IntentPhraseTE | IntentPhraseSynonym | IntentPhrasePE;

IntentPhraseStr: STRING;

IntentPhraseTE: 'TE:' trainable=[TrainableEntity|FQN];

IntentPhrasePE: 'PE:' pretrained=[PretrainedEntity|FQN] ('[' refPreValues*=STRING[','] ']')?;

IntentPhraseSynonym: 'S:' synonym=[Synonym|FQN];

// ----------------------------------------------------------------------

Dialogue:
    'Dialogue' name=ID
        'on:' onTrigger=[Trigger|FQN]
        'responses:' responses+=Response[',']
    'end'
;

Response: ActionGroup | SlotForm;

SlotForm:
    'SlotForm' name=ID
        params+=FormParam
    'end'
;

FormParam:
    name=ID ':' type=ParameterTypeDef '=' source=FormParamSource
;

FormParamSource: HRIParamSource | EServiceParamSource;

HRIParamSource:
    'HRI' '(' askSlot=STRING (',' '['extract+=ExtractionSource[','] ']')? ')'
;

EServiceParamSource:
    'EServiceHTTP' '('
        (verb=HTTPVerb ',')
        (host=STRING ',')
        (port=INT ',')
        (path=STRING ',')
        (
        ('[' query_params*=EServiceParam[','] ']' ',')?
        ('[' path_params*=EServiceParam[','] ']' ',')?
        ('[' body_params*=EServiceParam[','] ']' ',')?
        )#
    ')'
;

EServiceParam: name=ID '=' value=ParameterValue;

ParameterValue: INT | FLOAT | STRING | BOOL | List | Dict;
ParameterTypeDef: 'int' | 'float' | 'str' | 'bool' | 'list' | 'dict';

ExtractionSource: ExtractFromText | ExtractFromIntent | ExtractFromEntity;

ExtractFromText: 'text';
ExtractFromIntent: intent=[Trigger] ':' value=ParameterValue;
ExtractFromEntity: entity=[Entity];

// ACTIONS --------------------------------------------------------------
// ----------------------------------------------------------------------
ActionGroup: name=ID actions+=ActionTypes;
ActionTypes: SpeakAction | FireEventAction | RESTCallAction;

SpeakAction:
    'Speak' '(' text+=Text ')'
;

FireEventAction:
    'FireEvent' '(' uri=STRING ',' msg=Text ')'
;

RESTCallAction:
    'RESTCall' '('
        (verb=HTTPVerb ',')
        (host=STRING ',')
        (port=INT ',')
        (path=STRING ',')
        (
        ('[' query_params*=EServiceParam[','] ']' ',')?
        ('[' path_params*=EServiceParam[','] ']' ',')?
        ('[' body_params*=EServiceParam[','] ']' ',')?
        )#
    ')'
;

// ----------------------------------------------------------------------

// GENERAL --------------------------------------------------------------
// ----------------------------------------------------------------------

HTTPVerb: 'GET'|'POST'|'PUT';

DictItem:
    name=STRING ':' value=DictTypes
;

DictTypes:
    NUMBER | STRING | BOOL | Dict | List
;

Dict:
    '{' items*=DictItem[','] '}'
;

List:
    '[' items*=ListElements[','] ']'
;

ListElements:
    NUMBER | STRING | BOOL | List | Dict
;

Words:
    /[-\w ]*\b/
;

Text: TextStr | TextParam;

TextParam: param=[FormParam|FQN|^dialogues*.responses.params];
TextStr: STRING;
TextEntity: entity=[Entity|FQN|entities];

// === Fully Qualified Names Rule ===
FQN: ID('.'ID)*;

// special rule for comments.
Comment:
    /\/\/.*$/
;
// ----------------------------------------------------------------------
