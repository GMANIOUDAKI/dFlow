/*
 *            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
 *                    Version 2, December 2004
 *
 * Copyright (C) 2022 Panayiotou, Konstantinos <klpanagi@gmail.com>
 * Author: Panayiotou, Konstantinos <klpanagi@gmail.com>
 *
 * Everyone is permitted to copy and distribute verbatim or modified
 * copies of this license document, and changing it is allowed as long
 * as the name is changed.
 *
 *            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
 *   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
 *
 *  0. You just DO WHAT THE FUCK YOU WANT TO.
 */

/*
    dFSM Language
*/

dFlow:
    (
    'entities'
        entities*=TrainableEntity
    'end'
    )?
    (
    'synonyms'
        synonyms*=Synonym
    'end'
    )?
    (
    'intents'
        intents*=Intent
    'end'
    )?
    (
    'dialogues'
        dialogues*=Dialogue
    'end'
    )?
;

// ENTITIY --------------------------------------------------------------
Entity: TrainableEntity | PredefinedEntity;

TrainableEntity:
    'Entity' name=ID
        words+=Word[',']
    'end'
;

PredefinedEntity:
    'PERSON'        |
    'NORP'          |
    'FAC'           |
    'ORG'           |
    'GPE'           |
    'LOC'           |
    'PRODUCT'       |
    'EVENT'         |
    'WORK_OF_ART'   |
    'LAW'           |
    'LANGUAGE'      |
    'DATE'          |
    'TIME'          |
    'PERCENT'       |
    'MONEY'         |
    'QUANTITY'      |
    'ORDINAL'       |
    'CARDINAL'
;

// ----------------------------------------------------------------------

Synonym:
    'Synonym' name=ID
        words+=Word[',']
    'end'
;

Intent: InternalIntent | ExternalIntent;

// INTENT
InternalIntent:
    'IIntent' name=ID
        phrases*=IntentPhraseComplex[',']
    'end'
;

ExternalIntent:
    'EIntent' name=ID
    'end'
;

IntentPhraseComplex: (IntentPhrase)*;

IntentPhrase:
    (
        (phrase=STRING)?
        ('TE:' refTrainable?=[TrainableEntity|FQN])?
        ('S:' refSynonym?=[Synonym|FQN])?
        ('PE:' refPredefined?=[PredefinedEntity|FQN] ('[' refPreValues*=STRING[','] ']')?)?
    )#
;

Phrase:
    words*=Word
;

// ----------------------------------------------------------------------

// EVENTS -------------------------------------------------------------->

Dialogue:
    'Dialogue' name=ID
        'on: ' onIntent=[Intent|FQN]
        'responses: ' responses*=Response
    'end'
;


// Event: OnIntentEvent | OnActionCompleted;

// ----------------------------------------------------------------------


Response: Action | ActiveForm;

ActiveForm:
    'ActiveForm' name=ID
        (
            'parameters'
                params+=ActiveFormParameter
            'end'
        )?
    'end'
;

ActiveFormParameter:
    name=ID ':' type=ParameterType '=' source=ParameterSource
;

ParameterSource: HRIParamResource;

HRIParamResource:
    'HRI' '(' ask_slot=STRING ')'
;

ParameterType: 'int' | 'float' | 'str' | 'bool';
ParameterDefault: STRING | INT | FLOAT | BOOL;

// ACTIONS ------------------------------------------------------------->

Action: SpeakAction | FireEventAction | HTTPCallAction;

SpeakAction:
    'Speak' '(' text=STRING ')'
;

FireEventAction:
    'FireEvent' '(' uri=STRING ',' msg=STRING ')'
;

HTTPCallAction:
    'RESTCall' '('
        host=STRING ','
        port=INT ','
        path=STRING ','
        '[' query_params*=STRING[','] ']' ','
        '[' path_params*=STRING[','] ']' ','
        '[' body_params*=STRING[','] ']' ','
    ')'
;

// ----------------------------------------------------------------------
Word:
    /[-\w]*\b/
;


TextType:
  STRING|/\w*\b/
;

// === Fully Qualified Names Rule ===
FQN: ID('.'ID)*;

// special rule for comments.
Comment:
    /\/\/.*$/
;
