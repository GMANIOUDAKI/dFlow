from typing import Any, Text, Dict, List

from rasa_sdk import Action, Tracker, FormValidationAction
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import UserUtteranceReverted, SlotSet, Restarted, FollowupAction

import requests, re, json, random
from datetime import datetime
import ast


def compute_system_properties(property):
    if property.lower() == 'time':
      return datetime.now().strftime("%I:%M")
    if property.lower() == 'location':
      return ''
    if property.lower() == 'random_int':
      return random.randint(0,100)
    if property.lower() == 'random_float':
      return random.random()

def compute_user_properties(property):
    if property.lower() == 'name':
      return ''
    if property.lower() == 'surname':
      return ''
    if property.lower() == 'age':
      return ''
    if property.lower() == 'email':
      return ''
    if property.lower() == 'phone':
      return ''
    if property.lower() == 'city':
      return ''
    if property.lower() == 'address':
      return ''

{% if policies|length > 0 %}
class PolicyDecisionPoint():

    _role_action_policies = {
    {% for key, value in policies.items() %}
      "{{key}}" : {{value}},
    {% endfor %}
    }
    
    _user_role_policies = {}


    def __init__(self) -> None:
        self.role = '{{ac_misc.default_role}}'
        self.user_authorized = False
        PolicyDecisionPoint.read_user_role_policies_db()

    def check_users_permissions(self, action_ID, user_details) -> None:
        
        # Find the user's role in user-roles database
        for role_db in self._user_role_policies.keys():
            for user_db in self._user_role_policies[role_db]:
                if user_db == user_details:
                    self.role = role_db

        # Check if the user's role is authorized to access this action, in actions-roles/policies database
        if self.role in self._role_action_policies[action_ID]:
            self.user_authorized = True

        return

    @staticmethod
    def read_user_role_policies_db() -> None:
      """ Loads the user-role policies from database """
    
      if not PolicyDecisionPoint._user_role_policies:
        with open('{{ac_misc.policy_path}}', 'r') as f:
            s = f.read()
            PolicyDecisionPoint._user_role_policies = ast.literal_eval(s)
      return
{% endif %}

{% for action in actions %}
{% if action.validation_method is defined %}

class {{action.name|replace("_","")|capitalize}}(FormValidationAction):

    def name(self) -> Text:
        return "{{action.name}}"

{% for slot in action.info %}
    def {{slot.method}}(self, dispatcher, tracker, domain):
        output = {}
        requested_slot = tracker.get_slot('requested_slot')
        if requested_slot == "{{slot.name}}":
            {{slot.name}} = None
            {% if slot.source_type == 'EServiceCallHTTP' %}
            {% for slot in slot.data.slots %}
            {{slot}} = tracker.get_slot('{{slot}}')
            {% endfor %}
            {% for key, value in slot.data.path_params.items() %}
            {{key}} = "{{value}}"
            {% endfor %}
            {% for property in slot.data.system_properties %}
            {{property}} = compute_system_properties("{{property}}")
            {% endfor %}
            {% for property in slot.data.user_properties %}
            {{property}} = compute_user_properties("{{property}}")
            {% endfor %}
            {% if slot.data.verb == 'get' %}
            response = requests.{{slot.data.verb}}(f"{{slot.data.url}}",
                headers = {{slot.data.header_params}},
                params = {{slot.data.query_params}}
            )
            {% else %}
              response = requests.{{slot.data.verb}}(f"{{slot.data.url}}",
                  headers = {{slot.data.header_params}},
                  data = {{slot.data.body_params}},
                  params = {{slot.data.query_params}}
                )
            {% endif %}
            try:  
              {{slot.name}} = response.json(){{slot.data.response_filter}}
              output["{{slot.name}}"] = {{slot.name}}
            except:
                print(f'Error retrieving response from {{slot.data.url}} with code {response.status_code}.')
            {% elif slot.source_type == 'HRIParamSource' %}
            {% if slot.source_method is defined and slot.source_method == 'from_intent' %}
            intent = tracker.latest_message.get("intent", {}).get("name")
            {% for data in slot.data %}
            if intent == '{{data.intent}}':
                {% for slot in data.slots %}
                {{slot}} = tracker.get_slot('{{slot}}')
                {% endfor %}
                {% for property in slot.data.system_properties %}
                {{property}} = compute_system_properties("{{property}}")
                {% endfor %}
                {% for property in slot.data.user_properties %}
                {{property}} = compute_user_properties("{{property}}")
                {% endfor %}
                {% if slot.type in ['bool', 'int', 'float'] %}
                {{slot.name}} = {{data.value}}
                {% else %}
                {{slot.name}} = f"{{data.value}}"
                {% endif %}
            {% endfor %}
            output["{{slot.name}}"] = {{slot.name}}
            {% else %}
            text = tracker.latest_message['text']
            {% if slot.type == 'int' %}
            numbers = re.findall("\d+", text)
            {% elif slot.type == 'float' %}
            numbers = re.findall("\d+\.\d+", text)
            {% else %}
            return
            {% endif %}
            if len(numbers):
                {{slot.name}} = {{slot.type}}(numbers[0])
            output["{{slot.name}}"] = {{slot.name}}
            {% endif %}
            {% endif %}
        return output

{% endfor %}
{% else %}
class {{action.name|replace("_","")|capitalize}}(Action):
    {# ID = "{{action.name}}" #}
    {# followup_action = "" #}

    def name(self) -> Text:
        return "{{action.name}}"

    def run(self, dispatcher, tracker, domain):

        output = []
        {% if action.name in policies %}

        # Get user's details
        user_name = tracker.get_slot('name_slot')
        
        # Implement a policy decision point
        PDP = PolicyDecisionPoint()

        # Check if he is authorized
        PDP.check_users_permissions(self.name(), user_name)
        
        if not PDP.user_authorized:
          dispatcher.utter_message(text = "You are unauthorized for this action")
          return output
        {% endif %}

        {% for entity in action.entities %}
        {{entity}} = next(tracker.get_latest_entity_values("{{entity}}"), '')
        {% endfor %}
        {% for slot in action.slots %}
        {{slot}} = tracker.get_slot('{{slot}}')
        {% endfor %}
        {% for property in action.user_properties %}
        {{property}} = compute_user_properties("{{property}}")
        {% endfor %}

        {% for act in action.actions %}
        {% if act.type in ['SpeakAction', 'AskSlot'] %}
        {% for property in act.system_properties %}
        {{property}} = compute_system_properties("{{property}}")
        {% endfor %}
        dispatcher.utter_message(text = f"{{act.text}}")
        {% elif act.type == 'FireEventAction' %}
        ts = datetime.timestamp(datetime.now())
        event_data = {
            "id": "id",
            "type": "event",
            "timestamp": int(datetime.timestamp(datetime.now())),
            "payload": {"message": {{act.msg}}, "uri": f"{{act.uri}}" }
        }
        dispatcher.utter_message(json_message = event_data)
        {% elif act.type == 'SetSlot' %}
        {% for property in act.system_properties %}
        {{property}} = compute_system_properties("{{property}}")
        {% endfor %}
        output.append(SlotSet("{{act.slot}}", {{act.value}}))
        {% elif act.type == 'EServiceCallHTTP' %}
        {% for property in act.system_properties %}
        {{property}} = compute_system_properties("{{property}}")
        {% endfor %}
        {% for key, value in act.path_params.items() %}
        {{key}} = "{{value}}"
        {% endfor %}
        {% if act.verb == 'get' %}
        response = requests.{{act.verb}}(f"{{act.url}}",
            headers = {{act.header_params}},
            params = {{act.query_params}}
        )
        {% else %}
        response = requests.{{act.verb}}(f"{{act.url}}",
            headers = {{act.header_params}},
            data = {{act.body_params}},
            params = {{act.query_params}}
        )
        {% endif %}
        {% endif %}

        {% endfor %}
        return output

{% endif %}
{% endfor %}
