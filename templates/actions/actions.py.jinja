from typing import Any, Text, Dict, List

from rasa_sdk import Action, Tracker, FormValidationAction
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import UserUtteranceReverted, SlotSet, Restarted

import requests, re, json, random
from datetime import datetime

def compute_system_properties(property):
    if property == 'TIME':
      return datetime.now().strftime("%I:%M")
    if property == 'LOCATION':
      return ''
    if property == 'RANDOM_INT':
      return random.randint(0,100)
    if property == 'RANDOM_FLOAT':
      return random.random()

def compute_user_properties(property):
    if property == 'NAME':
      return ''
    if property == 'SURNAME':
      return ''
    if property == 'AGE':
      return ''
    if property == 'EMAIL':
      return ''
    if property == 'PHONE':
      return ''
    if property == 'CITY':
      return ''
    if property == 'ADDRESS':
      return ''

{% for action in actions %}
{% if action.validation_method is defined %}

class {{action.name|replace("_","")|capitalize}}(FormValidationAction):

    def name(self) -> Text:
        return "{{action.name}}"

{% for slot in action.info %}
    def {{slot.method}}(self, dispatcher, tracker, domain):
        output = {}
        requested_slot = tracker.get_slot('requested_slot')
        if requested_slot == "{{slot.name}}":
            {{slot.name}} = None
            {% if slot.source_type == 'EServiceCallHTTP' %}
            {% for slot in slot.data.slots %}
            {{slot}} = tracker.get_slot('{{slot}}')
            {% endfor %}
            {% for key, value in slot.data.path_params.items() %}
            {{key}} = "{{value}}"
            {% endfor %}
            {% if slot.data.verb == 'get' %}
            response = requests.{{slot.data.verb}}(f"{{slot.data.url}}",
                    headers = {{slot.data.header_params}},
                    params = {{slot.data.query_params}}
                    )
            {% else %}
            response = requests.{{slot.data.verb}}(f"{{slot.data.url}}",
                    headers = {{slot.data.header_params}},
                    data = {{slot.data.body_params}},
                    params = {{slot.data.query_params}}
                  )
            {% endif %}
            try:
                {{slot.name}} = response.json(){{slot.data.response_filter}}
                output["{{slot.name}}"] = {{slot.name}}
            except:
                print(f'Error retrieving response from {{slot.data.url}} with code {response.status_code}.')
            {% elif slot.source_type == 'HRIParamSource' %}
            text = tracker.latest_message['text']
            {% if slot.type == 'int' %}
            numbers = re.findall("\d+", text)
            {% elif slot.type == 'float' %}
            numbers = re.findall("\d+\.\d+", text)
            {% else %}
            return
            {% endif %}
            if len(numbers):
                {{slot.name}} = {{slot.type}}(numbers[0])
            output["{{slot.name}}"] = {{slot.name}}
            {% endif %}
        return output

{% endfor %}
{% else %}
class {{action.name|replace("_","")|capitalize}}(Action):

    def name(self) -> Text:
        return "{{action.name}}"

    def run(self, dispatcher, tracker, domain):
        {% for act in action.actions %}
        output = []
        {% if act.type == 'SpeakAction' %}
        {% for entity in act.entities %}
        {{entity}} = next(tracker.get_latest_entity_values("{{entity}}"), '')
        {% endfor %}
        {% for slot in act.slots %}
        {{slot}} = tracker.get_slot('{{slot}}')
        {% endfor %}
        {% for property in act.system_properties %}
        {{property}} = compute_system_properties("{{property}}")
        {% endfor %}
        {% for property in act.user_properties %}
        {{property}} = compute_user_properties("{{property}}")
        {% endfor %}
        dispatcher.utter_message(text = f"{{act.text}}")
        {% elif act.type == 'FireEventAction' %}
        {% for entity in act.entities %}
        {{entity}} = next(tracker.get_latest_entity_values("{{entity}}"), '')
        {% endfor %}
        {% for slot in act.slots %}
        {{slot}} = tracker.get_slot('{{slot}}')
        {% endfor %}
        ts = datetime.timestamp(datetime.now())
        event_data = {
            "id": "id",
            "type": "event",
            "timestamp": int(datetime.timestamp(datetime.now())),
            "payload": {"message": f"{{act.msg}}", "uri": f"{{act.uri}}" }
        }
        dispatcher.utter_message(json_message = event_data)
        {% elif act.type == 'SetSlot' %}
        output.append(SlotSet("{{act.slot}}", "{{act.value}}"))
        {% elif act.type == 'EServiceCallHTTP' %}
        {% for slot in act.slots %}
        {{slot}} = tracker.get_slot('{{slot}}')
        {% endfor %}
        {% for key, value in act.path_params.items() %}
        {{key}} = "{{value}}"
        {% endfor %}
        {% if act.verb == 'get' %}
        response = requests.{{act.verb}}(f"{{act.url}}",
                headers = {{act.header_params}},
                params = {{act.query_params}}
                )
        {% else %}
        response = requests.{{act.verb}}(f"{{act.url}}",
                headers = {{act.header_params}},
                data = {{act.body_params}},
                params = {{act.query_params}}
              )
        {% endif %}
        {% endif %}

        {% endfor %}
        return output

{% endif %}
{% endfor %}
