from typing import Any, Text, Dict, List

from rasa_sdk import Action, Tracker, FormValidationAction
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import UserUtteranceReverted, SlotSet, Restarted

import requests, re, json
from datetime import datetime

{% for action in actions %}
{% if action.validation_method is defined %}

class {{action.name|replace("_","")|capitalize}}(FormValidationAction):

    def name(self) -> Text:
        return "{{action.name}}"

{% for slot in action.info %}
    def {{slot.method}}(self, dispatcher, tracker, domain):
        output = {}
        requested_slot = tracker.get_slot('requested_slot')
        if requested_slot == "{{slot.name}}":
            text = tracker.latest_message['text']
            {{slot.name}} = None
            {% if slot.type == 'int' %}
            numbers = re.findall("\d+", text)
            {% elif slot.type == 'float' %}
            numbers = re.findall("\d+\.\d+", text)
            {% else %}
            reuturn
            {% endif %}
            if len(numbers):
                {{slot.name}} = {{slot.type}}(numbers[0])
            output["{{slot.name}}"] = {{slot.name}}
        return output

{% endfor %}
{% else %}
class {{action.name|replace("_","")|capitalize}}(Action):

    def name(self) -> Text:
        return "{{action.name}}"

    def run(self, dispatcher, tracker, domain):
        {% for act in action.actions %}
        output = []
        {% if act.type == 'SpeakAction' %}
        {% for entity in act.entities %}
        {{entity}} = next(tracker.get_latest_entity_values("{{entity}}"), '')
        {% endfor %}
        {% for slot in act.slots %}
        {{slot}} = tracker.get_slot('{{slot}}')
        {% endfor %}
        dispatcher.utter_message(text = f"{{act.text}}")
        {% elif act.type == 'FireEventAction' %}
        {% for entity in act.entities %}
        {{entity}} = next(tracker.get_latest_entity_values("{{entity}}"), '')
        {% endfor %}
        {% for slot in act.slots %}
        {{slot}} = tracker.get_slot('{{slot}}')
        {% endfor %}
        ts = datetime.timestamp(datetime.now())
        event_data = {
            "id": "id",
            "type": "event",
            "timestamp": int(datetime.timestamp(datetime.now())),
            "payload": {"message": f"{{act.msg}}", "uri": "{{act.uri}}" }
        }
        dispatcher.utter_message(json_message = event_data)
        {% elif act.type == 'SetSlot' %}
        output.append(SlotSet({{act.slot}}, {{act.value}}))
        {% elif act.type == 'EServiceCallHTTP' %}
        {% for key, value in act.path_params %}
        {{key}} = {{value}}
        {% if act.verb == 'get' %}
        response = requests.{{act.verb}}(f"{{act.url}}",
                headers = {{act.header_params}},
                params = {{act.query_params}}
                )
        {% else %}
        response = requests.{{act.verb}}(f"{{act.url}}",
                headers = {{act.header_params}},
                data = {{act.body_params}},
                params = {{act.query_params}}
              )
        {% endif %}
        {% endif %}

        {% endfor %}
        return output

{% endif %}
{% endfor %}
