from typing import Any, Text, Dict, List

from rasa_sdk import Action, Tracker, FormValidationAction
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import UserUtteranceReverted, SlotSet, Restarted

import requests, re, json
{% if commlib_config %}
import commlib.transports.redis as comm

conn_params = comm.ConnectionParameters(
    host="{{commlib_config._local_broker_host}}",
    port="{{commlib_config._local_broker_port}}",
    db="{{commlib_config._local_broker_db}}"
)
transport_type = TransportType.REDIS

conn_params.credentials.username = "{{commlib_config._local_broker_username}}"
conn_params.credentials.password = "{{commlib_config._local_broker_password}}"
_local_node = Node(node_name='rasa_action_server',
                        transport_type=transport_type,
                        transport_connection_params=conn_params,
                        debug={{commlib_config.debug}})
{% endif %}

{% for action in actions %}
{% if action.validation_method is defined %}

class {{action.name|replace("_","")|capitalize}}(FormValidationAction):

    def name(self) -> Text:
        return "{{action.name}}"

{% for slot in action.info %}
    def {{slot.method}}(self, dispatcher, tracker, domain):
        output = {}
        requested_slot = tracker.get_slot('requested_slot')
        if requested_slot == "{{slot.name}}":
            text = tracker.latest_message['text']
            {{slot.name}} = None
            {% if slot.type == 'int' %}
            numbers = re.findall("\d+", text)
            {% elif slot.type == 'float' %}
            numbers = re.findall("\d+\.\d+", text)
            {% else %}
            reuturn
            {% endif %}
            if len(numbers):
                {{slot.name}} = {{slot.type}}(numbers[0])
            output["{{slot.name}}"] = {{slot.name}}
        return output

{% endfor %}
{% else %}
class {{action.name|replace("_","")|capitalize}}(Action):

    def name(self) -> Text:
        return "{{action.name}}"

    def run(self, dispatcher, tracker, domain):
        {% for act in action.actions %}
        {% if act.type == 'SpeakAction' %}
        dispatcher.utter_message(text = "{{act.text}}")
        {% elif act.type == 'FireEventAction' %}
        dispatcher.utter_message(text = 'Send fire event')
        publisher = _local_node.create_publisher(topic = {{act.uri}})
        msg = json.dumps(msg, ensure_ascii=False)
        publisher.publish(msg)
        {% elif act.type == 'HTTPCallAction' %}
        url = "{{act.host}}:{{act.port}}/{{act.path}}"
        response = requests.get(url, params = {"query": query_params, "path": path_params, "body": body_params})
        {% endif %}

        {% endfor %}
        return

{% endif %}
{% endfor %}
